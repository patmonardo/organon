import { ValueType } from "../../ValueType";
import { DefaultValue } from "../../DefaultValue";
import { PropertyState } from "../../PropertyState";

/**
 * Defines the schema for a property in a graph element.
 */
export abstract class PropertySchema {
  /**
   * Returns the property key (name).
   */
  abstract key(): string;

  /**
   * Returns the value type of the property.
   */
  abstract valueType(): ValueType;

  /**
   * Returns the default value for this property when a value is not present.
   */
  abstract defaultValue(): DefaultValue;

  /**
   * Returns the state of this property, indicating its origin.
   */
  abstract state(): PropertyState;

  /**
   * Creates a property schema with the given key and value type.
   */
  static of(key: string, valueType: ValueType): PropertySchema;
  static of(
    key: string,
    valueType: ValueType,
    defaultValue: DefaultValue,
    state: PropertyState
  ): PropertySchema;
  static of(
    key: string,
    valueType: ValueType,
    defaultValue?: DefaultValue,
    state?: PropertyState
  ): PropertySchema {
    // Use proper factory method to get DefaultValue
    const finalDefaultValue = defaultValue ?? DefaultValue.of(valueType);

    return new ImmutablePropertySchema(
      key,
      valueType,
      finalDefaultValue,
      state ?? PropertyState.PERSISTENT
    );
  }
}

/**
 * Immutable implementation of PropertySchema.
 * This class would be generated by the Immutables processor in Java.
 */
class ImmutablePropertySchema extends PropertySchema {
  constructor(
    private readonly _key: string,
    private readonly _valueType: ValueType,
    private readonly _defaultValue: DefaultValue,
    private readonly _state: PropertyState
  ) {
    super();
    Object.freeze(this);
  }

  key(): string {
    return this._key;
  }

  valueType(): ValueType {
    return this._valueType;
  }

  defaultValue(): DefaultValue {
    return this._defaultValue;
  }

  state(): PropertyState {
    return this._state;
  }
}
