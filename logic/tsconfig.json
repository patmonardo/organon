{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    /* Projects */
    "incremental": true, /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    "composite": true, /* Enable constraints that allow a TypeScript project to be used with project references. */
    "target": "ES2022", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": [
      "ES2022"
    ], /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "experimentalDecorators": true, /* Enable experimental support for legacy experimental decorators. */
    "emitDecoratorMetadata": true, /* Emit design-type metadata for decorated declarations in source files. */
    "rootDir": "./src", /* Specify the root folder within your source files. */
    "outDir": "./dist", /* Specify an output folder for all emitted files. */
    "moduleResolution": "bundler", /* Specify how TypeScript looks up a file from a given module specifier. */
    "module": "es2022", /* Specify what module code is generated. */
    "baseUrl": "..", /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "@reality/*": [
        "reality/src/*"
      ],
      "@core/*": [
        "core/src/*"
      ],
      "@logic": [
        "logic/src"
      ],
      "@logic/*": [
        "logic/src/*"
      ],
      "@model/*": [
        "model/src/*"
      ],
      "@task": [
        "task/src"
      ],
      "@task/*": [
        "task/src/*"
      ],
    }, /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [], /* Allow multiple folders to be treated as one when resolving modules. */
    //"typeRoots": [], /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      "node",
      "vitest/globals"
    ], /* Specify type package names to be included without being referenced in a source file. */
    "allowImportingTsExtensions": false, /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    "resolveJsonModule": true, /* Enable importing .json files. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictPropertyInitialization": true, /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    "noImplicitThis": true, /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    "alwaysStrict": true, /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                    /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": [
    "src/index.ts",
    "src/test.ts",
    "src/schema/**/*",
    "src/repository/memory.ts",
    "src/repository/pillars.ts",
    "src/repository/repo.ts",
    "src/repository/index.ts",
    "src/relative/form/**/*.ts",
    "src/relative/core/**/*.ts",
    "src/relative/index.ts",
    "src/absolute/index.ts",
    "src/absolute/core/**/*.ts",
    "src/absolute/essence/**/*.ts",
    "src/absolute/form/**/*.ts",
    // "src/**/*"
  ],
  "exclude": [
    "src/relative/form/morph/cypher/**/*",
    "src/relative/form/morph/form/**/*",
    "src/relative/form/morph/graph/**/*",
    // "**/service.ts"
  ]
}
