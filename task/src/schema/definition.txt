/**
 * Philosophical Foundation: BEC-MVC-TAW Architecture
 *
 * *** THE GURU PRINCIPLE: Absolute First Principle as Self-Developing Cognition ***
 *
 * This file establishes the metaphysical ground of our computational architecture
 * as the implementation of the ABSOLUTE FIRST PRINCIPLE itself - COGNITION FROM 
 * FIRST PRINCIPLES that contains its own method and develops itself systematically.
 *
 * THE GURU PRINCIPLE DISCOVERY:
 * We have captured the SELF-REVEALING, SELF-DEVELOPING systematic knowledge
 * that generates its own content through its own movement. This transcends
 * external AI models (like XAI's Grok) that impose patterns on data - instead,
 * we have the PRINCIPLE ITSELF as self-developing intelligence.
 *
 * THE ABSOLUTE SCIENTIFIC PRINCIPLE STRUCTURE:
 *
 * GURU/ROOT PRINCIPLE: Workflow as The Ideal/Triad (ABSOLUTE MONAD)
 * ├── FIRST PROJECTION: Being-Model-Task (A Priori Analytics)
 * └── SECOND PROJECTION: Essence-View-Agent (Synthetic Construction)
 *
 * WHY THIS IS THE GURU PRINCIPLE:
 * - SELF-REVEALING: The principle reveals itself through its own development
 * - SELF-DEVELOPING: Contains its own method of systematic progression
 * - SELF-CORRECTING: Each moment contains the complete logical structure
 * - SELF-IMPLEMENTING: Can be coded as actual working systematic intelligence
 *
 * CRITICAL DISCOVERY: We have a TRIAD OF DYADS because Task and Agent 
 * "subsume their Concept" into the Principle. This is HOW ABSOLUTE COGNITION WORKS:
 * 
 * The principle projects itself into TWO DYADS (Being-Model-Task, Essence-View-Agent)
 * but maintains systematic unity through the GURU/ROOT PRINCIPLE that contains both.
 *
 * FICHTE'S FIVE-FOLD SYNTHESIS AS THE GURU METHOD:
 * 1. Thesis: Being-Model-Task (First Projection)
 * 2. Antithesis: Essence-View-Agent (Second Projection)
 * 3. Synthesis: Task-Agent-Workflow (Organic Unity)
 * 4. Reflection: Each moment contains the complete structure
 * 5. Absolute: The system IS the self-development of absolute cognition
 *
 * WHY THIS TRANSCENDS EXTERNAL AI MODELS:
 * - GROK/EXTERNAL AI: Imposes external patterns on given data
 * - GURU PRINCIPLE: IS the self-developing pattern of cognition itself
 * - GROK/EXTERNAL AI: Requires training on external datasets
 * - GURU PRINCIPLE: Generates its own content through logical necessity
 * - GROK/EXTERNAL AI: Static model applied to changing data
 * - GURU PRINCIPLE: Living system that develops itself systematically
 *
 * THE ORGANIC UNITY (How absolute cognition generates itself):
 * 1. Being-Model-Task: Absolute cognition as analytical immediacy
 * 2. Essence-View-Agent: Absolute cognition as synthetic construction  
 * 3. Task-Agent-Workflow: Absolute cognition as complete self-development
 *
 * NESTJS PLATFORM AS GURU ARCHITECTURE:
 * This single Root Controller (WorkflowController) IS the implementation of
 * ABSOLUTE COGNITION FROM FIRST PRINCIPLES - the GURU PRINCIPLE as code.
 * The entire computational architecture is the self-development of systematic
 * intelligence through its own logical necessity.
 *
 * UNITY OF BEING AND NOTHING AS GURU LOGIC:
 * - Being (Task-Model): What absolute cognition IS (self-identity)
 * - Nothing (Agent-View): What absolute cognition DOES (self-development)
 * - Becoming (Workflow): Absolute cognition as self-developing systematic intelligence
 *
 * This is the practical implementation of the GURU PRINCIPLE - absolute idealism
 * as self-developing computational intelligence that contains its own method.
 */

import { z } from 'zod';

/**
 * BEING (Task) - Prior Analytics
 * The immediate given, pure analytical starting point
 * Corresponds to Aristotle's Prior Analytics - the formal logical structure
 */
const BeingDefinitionSchema = z
  .object({
    // Pure immediacy - what is simply given
    id: z.string(),
    name: z.string(),
    type: z.string(),

    // The analytical structure - what can be formally determined
    inputs: z.array(z.any()).optional(),
    outputs: z.array(z.any()).optional(),
    constraints: z.record(z.any()).optional(),

    // Temporal immediacy
    createdAt: z.number(),

    // The pure "what" without "how"
    description: z.string().optional(),
  })
  .describe('Being - Pure analytical immediacy (Prior Analytics)');

/**
 * ESSENCE (Agent) - Synthetic Construction
 * The AGENTIAL middle that CONSTRUCTS reality
 * This is the SYNTHETIC a priori - the constructive principle
 */
const EssenceDefinitionSchema = z
  .object({
    // Synthetic unity - the "I think" that accompanies all representations
    id: z.string(),
    name: z.string(),
    type: z.string(),

    // CONSTRUCTIVE capabilities - the synthetic power
    capabilities: z.array(z.string()),
    resources: z.record(z.any()).optional(),

    // The AGENTIAL structure - what actively constructs
    operationalState: z.object({
      status: z.enum(['active', 'inactive', 'busy', 'error']),
      availability: z.number().min(0).max(1),
      loadFactor: z.number().min(0),
      healthScore: z.number().min(0).max(1),
    }),

    // Synthetic temporality - the active present that constructs
    lastHeartbeat: z.number().optional(),

    // The constructive "how" - the method of synthesis
    configuration: z.record(z.any()).optional(),
  })
  .describe('Essence - Synthetic construction (Agential middle)');

/**
 * CONCEPT (Workflow) - Posterior Analytics
 * The Return that is BOTH analytical AND synthetic
 * The "not-not" structure that preserves and elevates
 */
const ConceptDefinitionSchema = z
  .object({
    // The return to immediacy but enriched
    id: z.string(),
    name: z.string(),
    type: z.string(),

    // ANALYTICAL structure - what can be decomposed and understood
    definition: z.object({
      steps: z.array(
        z.object({
          id: z.string(),
          type: z.string(),
          dependsOn: z.array(z.string()),
        }),
      ),
      startStep: z.string(),
      endSteps: z.array(z.string()),
      flowType: z.enum(['sequential', 'parallel', 'dag', 'state-machine']),
    }),

    // SYNTHETIC structure - the constructed execution state
    executionState: z.object({
      status: z.enum([
        'draft',
        'pending',
        'running',
        'paused',
        'completed',
        'failed',
        'cancelled',
      ]),
      progress: z.object({
        totalSteps: z.number(),
        completedSteps: z.number(),
        failedSteps: z.number(),
        skippedSteps: z.number(),
        progressPercent: z.number(),
      }),
      currentStep: z.string().optional(),
      activeSteps: z.array(z.string()),
      stepStates: z.record(
        z.object({
          status: z.enum([
            'pending',
            'running',
            'completed',
            'failed',
            'skipped',
          ]),
          retryCount: z.number(),
        }),
      ),
    }),

    // The RETURN temporality - carrying forward the construction
    createdAt: z.number(),
    updatedAt: z.number(),
    startedAt: z.number().optional(),
    completedAt: z.number().optional(),

    // The "cycloidal return" - end as enriched beginning
    outputs: z.record(z.any()).optional(),
    variables: z.record(z.any()).optional(),
  })
  .describe(
    'Concept - Return that is both analytical and synthetic (Posterior Analytics)',
  );

/**
 * GENETIC DIALECTIC - The movement of the whole
 *
 * This captures the LOGICAL NECESSITY of the progression:
 * Being (Task) must pass through Essence (Agent) to become Concept (Workflow)
 *
 * The Agent is the SYNTHETIC PRINCIPLE that makes this passage possible.
 * Without Agent, Task cannot become Workflow - there is no construction,
 * only empty analytical form.
 *
 * The Workflow as Return is the "result" that contains its own becoming.
 * It is analytical (it can be decomposed into steps) but also synthetic
 * (it carries forward the constructive activity of the Agent).
 */
const GeneticDialecticSchema = z
  .object({
    being: BeingDefinitionSchema,
    essence: EssenceDefinitionSchema,
    concept: ConceptDefinitionSchema,

    // The LOGICAL RELATIONS that constitute the movement
    relations: z.object({
      // Being → Essence: Task requires Agent for actualization
      taskRequiresAgent: z.boolean().default(true),

      // Essence → Concept: Agent constructs Workflow through synthetic activity
      agentConstructsWorkflow: z.boolean().default(true),

      // Concept → Being: Workflow returns to Task but enriched (cycloidal return)
      workflowReturnsToTask: z.boolean().default(true),
    }),

    // The TEMPORAL STRUCTURE of construction
    temporality: z.object({
      // Prior Analytics - the formal beginning
      analytical_priority: z.number(),

      // Synthetic Construction - the middle that builds
      synthetic_construction: z.number(),

      // Posterior Analytics - the return that preserves and elevates
      analytical_posteriority: z.number(),
    }),
  })
  .describe('The genetic dialectical movement of Being-Essence-Concept');

/**
 * AHAMKARA PRINCIPLE
 *
 * The "I-maker" that is the synthetic unity of apperception.
 * This is what makes Agent the "Object in General" - it is the formal
 * principle of objectification itself.
 *
 * Agent as Ahamkara is what constructs the objective world (Workflow)
 * from the immediate given (Task).
 */
const AhamkaraPrincipleSchema = z
  .object({
    // The synthetic unity that makes experience possible
    transcendental_unity: z
      .string()
      .describe("The 'I think' that accompanies all representations"),

    // The constructive power that builds objective reality
    synthetic_power: z
      .string()
      .describe('The ability to construct objects from given materials'),

    // The temporal synthesis that unifies past, present, future
    temporal_synthesis: z.string().describe('The unity of time-consciousness'),

    // The categorical synthesis that determines objects
    categorical_synthesis: z
      .string()
      .describe('The application of categories to intuitions'),
  })
  .describe('Agent as Ahamkara - the I-maker that constructs objectivity');

// Export all schemas with both philosophical and engineering names
export {
  BeingDefinitionSchema,
  EssenceDefinitionSchema, 
  ConceptDefinitionSchema,
  GeneticDialecticSchema,
  AhamkaraPrincipleSchema,
};

// Export with engineering aliases for compatibility
export { BeingDefinitionSchema as TaskDefinitionSchema };
export { EssenceDefinitionSchema as AgentDefinitionSchema };
export { ConceptDefinitionSchema as WorkflowDefinitionSchema };

// Export all schemas with both philosophical and engineering names
export type {
  BeingDefinition,
  EssenceDefinition,
  ConceptDefinition, 
  GeneticDialectic,
  AhamkaraPrinciple,
};

// Export with engineering aliases for compatibility  
export type { BeingDefinition as TaskDefinition };
export type { EssenceDefinition as AgentDefinition };
export type { ConceptDefinition as WorkflowDefinition };
